name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master

jobs:
  build-binary:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - ubuntu-24.04-arm
          - macos-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout tree
        uses: actions/checkout@v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v32

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ matrix.os }}-${{ hashFiles('**/*.nix') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ matrix.os }}-
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size-linux: 1073741824
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: cache-${{ matrix.os }}-
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never

      - name: Build Packages (binary) / ${{ matrix.os }}
        run: nix build .#mail2phone

  build-static-binary:
    name: Build Static Binary (${{ matrix.target }})
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        target:
          - x86_64
          - aarch64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout tree
        uses: actions/checkout@v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v32

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-static-${{ matrix.target }}-${{ hashFiles('**/*.nix') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-static-${{ matrix.target }}
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size-linux: 1073741824
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: cache-${{ matrix.os }}-
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never

      - name: Build Packages (static)
        run: nix build .#mail2phone-static-${{ matrix.target }}

  build-docker-image:
    name: Build Docker Image (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        arch:
          - x86_64
          - aarch64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout tree
        uses: actions/checkout@v5

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v32

      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-docker-${{ matrix.arch }}-${{ hashFiles('**/*.nix') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-docker-${{ matrix.arch }}
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size-linux: 1073741824
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: cache-${{ matrix.os }}-
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never

      - name: Build Packages (docker)
        run: nix build .#mail2phone-image-${{ matrix.arch }}

      - name: Save Docker image as tar
        run: |
          docker load < result
          docker tag mail2phone-image:latest mail2phone:latest-${{ matrix.arch }}
          docker save mail2phone:latest-${{ matrix.arch }} -o mail2phone-latest-${{ matrix.arch }}.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: mail2phone-latest-${{ matrix.arch }}
          path: mail2phone-latest-${{ matrix.arch }}.tar

  docker-manifest:
    name: Create & Push Docker Manifest
    needs:
      - build-docker-image
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Load and push images
        run: |
          docker load -i ./artifacts/mail2phone-latest-x86_64/mail2phone-latest-x86_64.tar
          docker load -i ./artifacts/mail2phone-latest-aarch64/mail2phone-latest-aarch64.tar
          docker tag mail2phone:latest-x86_64 ${{ vars.DOCKERHUB_USERNAME }}/mail2phone:latest-amd64
          docker tag mail2phone:latest-aarch64 ${{ vars.DOCKERHUB_USERNAME }}/mail2phone:latest-arm64
          docker push ${{ vars.DOCKERHUB_USERNAME }}/mail2phone:latest-amd64
          docker push ${{ vars.DOCKERHUB_USERNAME }}/mail2phone:latest-arm64

      - name: Create and push manifest
        run: |
          docker manifest create ${{ vars.DOCKERHUB_USERNAME }}/mail2phone:latest \
            --amend ${{ vars.DOCKERHUB_USERNAME }}/mail2phone:latest-amd64 \
            --amend ${{ vars.DOCKERHUB_USERNAME }}/mail2phone:latest-arm64
          docker manifest push ${{ vars.DOCKERHUB_USERNAME }}/mail2phone:latest
